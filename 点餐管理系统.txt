#include <stdio.h> //头文件
#include <string.h> //提供下面strcspn和strlen函数来处理字符串
// #include <windows.h> //提供MAX_PATH路径最大长度，但感觉好像不是很必要（○｀ 3′○），其实还是必要的(MAX_PATH确实无所谓)，如果按照原来的方案来写，SHGetFolderPath依赖 Windows特定类型,CSIDL_MYDOCUMENTS等常量定义在<shlobj.h>，但<shlobj.h>本身又依赖Windows基础类型，所以直接换方案，两个头文件全都注释掉（*＾-＾*）
// #include <shlobj.h>  //提供SHGetFolderPath函数和CSIDL_DESKTOPDIRECTORY常量
#include <time.h> //用来获取时间戳,时间戳指格林威治时间1970年01月01日00时00分00秒起至现在的总秒数
//放弃多文件编程了，有点复杂，也不是很必要

void main_menu_print() //定义输出主菜单函数
{
    int i;
    char a[][10]={"菜单","凉菜","主食","甜品","饮料","招牌"}; //一维数组只能储存单个字符串，UTF-8编码下每个汉字三个字节，长度定为6。定义一个数组储存菜单和五个大类。防止编码不一样，又把长度改为10了，应该不会有问题了
    printf("%s\n",a[0]); //%s表示字符串。先输出“菜单”
    for(i=1;i<6;i++) //i不能=6，i从1开始，即数组第二个
    {
        printf("\t%d.%s\n",i,a[i]); // \t为制表符，仅为美观。循环输出数字和数字所对应的菜品大类
    }
    puts("\t0.结束点餐\n");
}

struct dishes //定义菜品结构体
{
    int number; //定义编号
    char name[50]; //定义菜品名
    double price; //定义菜品价格
    int count; //定义被点次数
}; //结构体必须以；结束

struct dishes cool_dishes[3]={{1,"凉拌黄瓜",10.0,0}, //结构体在所有函数之外，为全局变量，可以在函数中直接使用
                              {2,"凉拌牛肉",50.0,0}, 
                              {3,"皮蛋豆腐",15.0,0}}; //初始化结构体，原本使用struct dishes cool_dishes1={1,"凉拌黄瓜",10.0};语句分别初始化三个菜品结构体，但是不便于接下来的函数中循环输出，所以改为使用结构体数组来储存多个菜品的编号，名称，价格，被点次数
 //要使用完整的类型名struct dishes，或者使用typedef来定义，即typedef struct { } dish;然后就可以直接使用dish cool_dishes1={ }

void menu_cool_dishes() //定义输出凉菜菜单的函数
{
    int i;
    puts("======= 凉菜菜单 =======\n");
    for(i=0;i<3;i++)
    {
        printf("%d.%-15s %.2f\n",//%-15s左对齐15个字符的宽度，%.2f保留两位小数，\n记得换行保证美观
                          cool_dishes[i].number, //分别访问菜品编号
                          cool_dishes[i].name, //名称
                          cool_dishes[i].price); //价格
    } 
    puts("======================");
    puts("0.返回上层菜单");
    puts("请选择一个菜品:");
}

struct dishes main_dishes[3]={{1,"米饭",2.0,0},
                              {2,"面条",5.0,0},
                              {3,"馒头",1.0,0}};

void menu_main_dishes()
{
    int i;
    puts("======= 主食菜单 =======\n");
    for(i=0;i<3;i++)
    {
        printf("%d.%-15s %.2f\n",
            main_dishes[i].number,
            main_dishes[i].name,
            main_dishes[i].price);
    }
    puts("========================");
    puts("\t0.返回上层菜单");
    puts("请选择一个菜品:");
}

struct dishes sweet_dishes[3]={{1,"草莓蛋糕",52.001,0},
                               {2,"杨枝甘露",108.0,0},
                               {3,"提拉米苏",268.0,0}};

void menu_sweet_dishes()
{
    int i;
    puts("======= 甜品菜单 =======\n");
    for(i=0;i<3;i++)
    {
        printf("%d.%-15s %.2f\n",
            sweet_dishes[i].number,
            sweet_dishes[i].name,
            sweet_dishes[i].price);
    }
    puts("========================");
    puts("\t0.返回上层菜单");
    puts("请选择一个菜品:");
}

struct dishes drink_dishes[3]={{1,"奶茶",15.0,0},
                               {2,"可乐",5.0,0},
                               {3,"雪碧",4.0,0}};

void menu_drink_dishes()
{
    int i;
    puts("======= 饮料菜单 =======\n");
    for(i=0;i<3;i++)
    {
        printf("%d.%-15s %.2f\n",
            drink_dishes[i].number,
            drink_dishes[i].name,
            drink_dishes[i].price);
    }
    puts("========================");
    puts("\t0.返回上层菜单");
    puts("请选择一个菜品:");
}

struct dishes specialty_dishes[3]={{1,"鲑鱼大帝",65.0,0},
                                   {2,"鱼架清蒸",100.0,0},
                                   {3,"漆蒸四鱼",74.0,0}};

void menu_specialty_dishes()
{
    int i;
    puts("======= 招牌菜单 =======\n");
    for(i=0;i<3;i++)
    {
        printf("%d.%-15s %.2f\n",
            specialty_dishes[i].number,
            specialty_dishes[i].name,
            specialty_dishes[i].price);
    }
    puts("========================");
    puts("\t0.返回上层菜单");
    puts("请选择一个菜品:");
}

void clear_input() //清除缓存区，后面单独使用了一下清除而没有判断，是type_and_range_judge两个清除缓冲区同时判断范围的函数的一部分,就先不把这个函数写那两个函数了︿(￣︶￣)︿+
{
    int c;
    while ((c=getchar())!='\n'&&c!=EOF){}
}

int type_and_range_judge_in_main_menu(int r, int m) //定义一个用于判断用户输入的是否为整数且是否在范围内的函数，原本在主函数中直接使用，但是会进行多次判断，所以封装成函数，方便直接调用
{
    int c;
    while ((c=getchar())!='\n'&&c!=EOF){} //空循环将缓冲区里的字符读取出来并给变量c，以达到清空缓冲区的作用。c的类型定义为int，因为getchar的返回值为int型
    if(r!=1) //如果scanf的返回值不是1即没有获取的到整数
    {   
        puts("输入错误，请重新输入数字");           
        return 1; //这里要写return 1 原本在主函数中可以直接写continue退出当前循环开始下一次循环
    }
    if(m < 0 || m > 5) //判断输入的数字是否在正确范围内
    {
        puts("请输入0到5之间的数字");
        return 1;
    }
    return 0;
}

int type_and_range_judge_in_submenu(int r, int m) //再定义一个子菜单的判断，也可以将上面原本主菜单的判断函数改一下，把m<0||m>5中的数字改为min和max变量，调用的时候给值，但是不想改了，不如直接复制黏贴再改个函数名和数字^-^
{
    int c;
    while ((c=getchar())!='\n'&&c!=EOF){} 
    if(r!=1) 
    {   
        puts("输入错误，请重新输入数字");           
        return 1; 
    }
    if(m < 0 || m > 3) 
    {
        puts("请输入0到3之间的数字");
        return 1;
    }
    return 0;
}

int type_and_range_judge_in_character_choose(int r, int m) //再定义一个角色选择的判断
{
    int c;
    while ((c=getchar())!='\n'&&c!=EOF){} 
    if(r!=1) 
    {   
        puts("输入错误，请重新输入数字");           
        return 1; 
    }
    if(m < 1 || m > 2) 
    {
        puts("请输入1或2");
        return 1;
    }
    return 0;
}

void order_dishes(struct dishes *dish_array, void (*menu_print)()) //struct dishes为定义的菜品结构类型，dish_array（菜品数组）接收一个指向struct dishes类型数组的指针。void指向没有返回值的函数，menu_print接受一个函数指针
{
    int n,r;
    menu_print(); //调用子菜单的函数
    while(1)
    {
        r=scanf("%d",&n);
        if(type_and_range_judge_in_submenu(r, n))
        {
            continue;
        }
        if(n==0)
        {
            break;
        }
        printf("您选择了一份%s\n",dish_array[n-1].name); //记得n-1
        dish_array[n-1].count++; //被点次数加一
    }
} //因为会多次重复类似的点餐，所以将子菜单点餐再封装成一个函数，可以多次调用

void print_order_summary(FILE *stream,struct dishes *dish_array) //定义一个函数来实现输出所点菜品名称及价格和份数,小改一手来适配后面对文件的操作，增加了FILE *stream表示一个输入/输出流
{
    int i;
    double total = 0.0;
    for (i = 0; i < 3; i++) 
    {
        if (dish_array[i].count > 0)
        {
            total = dish_array[i].price * dish_array[i].count;
            fprintf(stream," %-10s\t\t%.3f\t\t%d\t%.3f\n", dish_array[i].name, //这里声明了但是忘记加一个stream了，直接就是一个警告╮（╯＿╰）╭
                                                dish_array[i].price,
                                                dish_array[i].count,
                                                total);
        }
    }
}

double calculate_total(struct dishes *dish_array) //定义一个函数来计算每个大类的菜的总价
{
    int i;
    double total=0.0;
    for (i=0;i<3;i++)
    {
        total=total+dish_array[i].price*dish_array[i].count;
    }
    return total;
}

double calculate_grand_total() //定义一个函数把五个大类的菜的总价相加
{
    double total=0.0;
    total += calculate_total(cool_dishes);
    total += calculate_total(main_dishes);
    total += calculate_total(sweet_dishes);
    total += calculate_total(drink_dishes);
    total += calculate_total(specialty_dishes);
    return total;
}

void print_summary_to_txt() //定义一个将订单写入txt文件的函数
{
    // char desktop_path[MAX_PATH]; //MAX_PATH为Windows 定义的常量，值为 260
    // SHGetFolderPath(NULL, CSIDL_DESKTOPDIRECTORY, NULL, 0, desktop_path); //SHGetFolderPath用于获取文件路径，CSIDL_DESKTOPDIRECTORY指定要获取的是桌面文件夹
    // FILE *file_print = fopen(desktop_path"\\summary.txt", "a+"); //fopen打开文件，a+为追加内容，w为只读会覆盖之前写入的信息,\为转义符，\\为\。（还不能在注释里单写一个反斜杠，编译器警告这可能是错误的多行注释o(￣ヘ￣o＃)）
    // 上面这段先全部注释掉吧，本来在桌面创建文件是为了方便，但是好像没有什么必要(＠_＠;)
    FILE *file_print=fopen("order_summary.txt","a+"); //FILE型的指针，fopen是用于打开文件的函数，该函数需要文件名和打开模式两个参数，为打开的文件新建一个流（什么是流呢X﹏X）然后返回指向FILE型对象的指针，这里的话就是file_print
                                                      //打开模式有很多，r只读，w只写（会清除之前写过的内容），r+（以更新打开文件），a追加（在文末开始的只写？只写不是清除之前的内容吗）
    // if (!file_print) 
    // {
    //     printf("错误");
    //     return;
    // }
    //这段用来检测是否创建了文件，以为是创建在和.c文件同一路径，还以为权限不够没创建呢(￣△￣；)，检测了一下又没有返回错误，原来是创建在outp里和exe文件在同一个路径

    fprintf(file_print,"\n======================= 订单明细 =======================\n");
    time_t now = time(NULL); //time_t表示时间的标准数据类型，time函数可以获取当前系统时间，NULL表示不需要将结果存储在额外变量中，只通过返回值获取时间戳
    fprintf(file_print, "日期:%s",ctime(&now)); //ctime函数将时间戳转换为可读的字符串,这里用&now来作为参数而不是用值传递可以防止很多问题，虽然这些问题不一定会遇到
                                                //这里用ctime函数输出的只能是英文(⊙﹏⊙)要转成中文有点复杂，就不搞了
    fprintf(file_print,"菜名\t\t\t单价（元）\t数量\t总价\n");
    print_order_summary(file_print,cool_dishes); //这里要加一个file_print来输出到order_summary.txt这个文件里
    print_order_summary(file_print,main_dishes);
    print_order_summary(file_print,sweet_dishes);
    print_order_summary(file_print,drink_dishes);
    print_order_summary(file_print,specialty_dishes);
    double grand_total = calculate_grand_total(); 
    fprintf(file_print,"=========================================================\n");
    fprintf(file_print,"总价格：\t\t\t\t\t%.3f\n",grand_total);
    fprintf(file_print,"=========================================================\n");                                                 
    fclose(file_print); //关闭文件，很重要哦o(￣ヘ￣o＃)
}

void read_txt() //再写一个用来读取的函数，其实这读取函数还可以写其他很多功能，比如搜素包含菜品名字的订单信息，或者按照被购买次数来进行订单排序。但是这里就先简单的读取一下就行
{
    FILE *file = fopen("order_summary.txt", "r");
    char line[256]; //定义字符数组必须明确指定长度,常见长度选择:256适合普通文本行
    int order_count=0;
    while (fgets(line, sizeof(line), file)) //fgets逐行读取文件,sizeof(line)自动计算缓冲区大小,防止缓冲区溢出(正常应该不会溢出n(*≧▽≦*)n)
     {                      
        line[strcspn(line, "\n")] = '\0'; //移除换行符，strcspn逐字查找，返回值为\n的索引位置
        printf("%s\n", line);
        order_count++; //如果文件是空的话，fgets会返回null循环不会执行，也就不会计数
    }
    fclose(file);
    if (order_count==0) //如果==0也就是没有计数，那就是空文件
    {
        puts("没有订单信息");
    }
}

int main()
{
    int m,r; //定义菜单大类和单个菜品的对应变量名，删除未使用变量n
    puts("=====禾青婉餐厅=====");
    puts("请选择您的身份：");
    puts("1.客户");
    puts("2.老板");
    r=scanf("%d",&m);
    if(m==2) //新增老板的身份，本来想用两个程序来实现的，就相当于是合在一起了
    {
        clear_input(); //一定要记得清除一下缓存区，否则影响接下来的fgets的获取，一定要加！！！( ｀д′)
        char password[100];
        puts("请输入密码：");
        fgets(password,sizeof(password),stdin); //sizeof(password)自动计算缓冲区大小,stdin键盘输入,fgets获取输入字符串
        size_t len = strlen(password); //strlen()用于计算字符串长度,size_t 无符号整数类型，专门用于表示大小和长度,储存在len中
        if (len > 0 && password[len-1] == '\n') //处理最后输入的换行符
        {
            password[len-1] = '\0';
            len--; //后续应该不会在用到和字符串长度相关的东西(。-`ω?-)，但是先留着吧(??ω??)
        }
        while(strcmp(password, "十有九人堪白眼，百无一用是书生") != 0) //password!="十有九人堪白眼，百无一用是书生"原本使用此方法来判断是否密码正确，但是!= 比较的是内存地址，而不是字符串内容，password 是字符数组的地址，"十有九人堪白眼，百无一用是书生" 是另一个内存地址
        {                                                           //strcmp() 可以逐个字符比较字符串内容，返回值为0表示字符串完全相同，需要包含 <string.h> 头文件
            puts("密码错误，请重新输入：");
            fgets(password,sizeof(password),stdin);
            size_t len = strlen(password); 
            if (len > 0 && password[len-1] == '\n') //这里处理换行符的if语句，也可以换成用strcmp来查找后替换password[strcspn(password, "\n")] = '\0';更加简洁一些
            {
                password[len-1] = '\0';
                len--;
            }
        }
        puts("登录成功");
        puts("以下是历史订单");
        read_txt();
    }

    if(m==1)
    {
        puts("=====欢迎您点餐=====");
        while(1) //无限循环，与python中常使用的while true不同。while（true）也可以实现无限循环，但需要包含<stdbool.h> 头文件。或者直接使用宏定义
        {
            main_menu_print(); //调用主菜单输出函数
            puts("请选择一个菜品分类");
            r=scanf("%d",&m); //获取返回值赋值给r，scanf的可能返回值为1：读取到整数，0：输入不匹配，EOF：输入结束
            if(m==0) //选择0时退出
            {
                puts("欢迎下次光临");
                break;
            }
            if(type_and_range_judge_in_main_menu(r, m)) //调用上述判断函数,返回值为1则执行continue
            {
                continue; // 输入无效，重新开始循环
            }
            switch(m) //switch语句，根据m的值来对应执行
            {
                case 1: //对应值为1时
                {
                    puts("您选择的是凉菜");
                    order_dishes(cool_dishes, menu_cool_dishes); //调用函数输出菜单并进行选择,调用时不要加void
                    break; //switch-case语句记得加break，一定要加！！！！QAQ
                }
                case 2:
                {
                    puts("您选择的是主食");
                    order_dishes(main_dishes, menu_main_dishes);
                    break;
                }
                case 3:
                {
                    puts("您选择的是甜品");
                    order_dishes(sweet_dishes, menu_sweet_dishes);
                    break;
                }
                case 4:
                {
                    puts("您选择的是饮料");
                    order_dishes(drink_dishes, menu_drink_dishes);
                    break;
                }
                case 5:
                {
                    puts("您选择的是招牌");
                    order_dishes(specialty_dishes, menu_specialty_dishes);
                    break;
                }
                
            }
        }
        printf("\n======================= 订单明细 =======================\n");
        printf("菜名\t\t\t单价（元）\t数量\t总价\n");
        print_order_summary(stdout,cool_dishes); //调用函数输出每个大类的菜的总结,改后新加stdout，可以输出到控制台
        print_order_summary(stdout,main_dishes);
        print_order_summary(stdout,sweet_dishes);
        print_order_summary(stdout,drink_dishes);
        print_order_summary(stdout,specialty_dishes);
        double grand_total = calculate_grand_total(); //调用函数计算所有菜的总价,并赋值给grand_total
        printf("=========================================================\n");
        printf("总价格：\t\t\t\t\t%.3f\n",grand_total); //应该输出grand_total而不是total
        printf("=========================================================\n");
        printf("祝您用餐愉快，欢迎下次光临");
        print_summary_to_txt();
        return 0;
    }
}
//写了喽，可以实现正常点餐
//这次才是写完了，新增了客户和老板的选项o(*￣︶￣*)o
//应该会上传到到GitHub上，虽然这种程序一抓一大把，但是第一次写的完整的一个系统，后续blog也会上传吧
// 可于我的github https://github.com/lucime470/c 查看其他内容
// blog估计得等很久了https://lucime470.github.io/

